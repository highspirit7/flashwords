name: CI_CD

on:
  #   push:
  #     branches:
  #       - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc
      DATABASE_URL: postgresql://flashwords_db_owner:KP0S8CnlUtoi@ep-proud-sound-a1f5c859.ap-southeast-1.aws.neon.tech/flashwords_db?sslmode=require
      ACCESS_TOKEN_SECRET: 438e18317bd2c363d8e25b79538e0ec0975bf718d9d55a9461ceb46f1ee9445b213de25e994de83ebf20281f1c7a0b5a77a53559d670d43ea5ec95b8e67ecfd9
      REFRESH_TOKEN_SECRET: 94d65805550da90f221a627bac2d47fe51c80eeeec4556439518f21a4e3453f628ff5b5a7771e2a04baba2c8ce114f6dee821097b0b0e972c330a9406e2435a4
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: grownuprince
          POSTGRES_PASSWORD: password
          POSTGRES_DB: flashwords_dev
        ports:
          - 5432:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check server
        run: npm run type-check -w=server

      - name: Type check client
        run: npm run type-check -w=client

      - name: Lint server
        run: npm run lint -w=server

      - name: Lint client
        run: npm run lint -w=client

      #   - name: Test client (unit)
      #     run: npm run test:unit -w=client

      - name: Run server database migrations
        run: npm run migrate:latest -w=server

      - name: Test server
        run: npm run test -w=server

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: Start server for E2E tests
        run: npm run dev -w=server &

      - name: Build front end for E2E tests
        run: npm run build -w=client

      - name: Wait for server to startup
        uses: Jtalk/url-health-check-action@v4
        with:
          max-attempts: 5
          retry-delay: 5s
          url: ${{ env.VITE_API_ORIGIN }}/api/health

        # TODO: currently only have e2e tests for authentication. Once more tests are added, need to modify this command.
      - name: Test client E2E
        run: npm run test:e2e -w=client auth.test.ts

      # To upload playwright report as an artifact
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report/
          retention-days: 7
  build-deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    env:
      CLIENT_IMAGE_TAG: client-${{ github.sha }}
      SERVER_IMAGE_TAG: server-${{ github.sha }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup aws lightsail cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build server image
        run: >-
          docker build
          -t $SERVER_IMAGE_TAG
          -f ./server/Dockerfile .

        # if you need to pass additional environment variables to the client
        # build, then you will need to pass them as a docker build argument:
        # --build-arg VITE_MY_CUSTOM_VAR=${{vars.MY_CUSTOM_VAR}}
      - name: Build client image
        run: >-
          docker build
          -t $CLIENT_IMAGE_TAG
          -f ./client/Dockerfile .

      - name: Push server image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $SERVER_IMAGE_TAG
          --image $SERVER_IMAGE_TAG
          --output yaml

      - name: Push client image
        run: >-
          aws lightsail push-container-image
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }}
          --label $CLIENT_IMAGE_TAG
          --image $CLIENT_IMAGE_TAG
          --output yaml

      - name: Get Lightsail image tag
        run: |
          aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image'
          echo "LIGHTSAIL_SERVER_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$SERVER_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV
          echo "LIGHTSAIL_CLIENT_IMAGE=$(aws lightsail get-container-images --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} | jq -r '.containerImages[] | select(.image | contains(".'$CLIENT_IMAGE_TAG'")) | .image')" >> $GITHUB_ENV

      # if you need to pass additional environment variables to the server,
      # then you will need to pass them as a json file:
      - name: Create containers.json
        run: |
          echo '{
            "client": {
              "image": "${{ env.LIGHTSAIL_CLIENT_IMAGE }}",
              "command": [],
              "ports": {
                "80": "HTTP"
              },
              "environment": {
                "API_PROXY_PASS": "http://localhost:3000"
              }
            },
            "server": {
              "image": "${{ env.LIGHTSAIL_SERVER_IMAGE }}",
              "ports": {
                "3000": "HTTP"
              },
              "environment": {
                "NODE_ENV": "production",
                "PORT": "3000",
                "DATABASE_URL": "${{ secrets.PROD_DATABASE_URL }}",
                "ACCESS_TOKEN_SECRET": "438e18317bd2c363d8e25b79538e0ec0975bf718d9d55a9461ceb46f1ee9445b213de25e994de83ebf20281f1c7a0b5a77a53559d670d43ea5ec95b8e67ecfd9",
                "REFRESH_TOKEN_SECRET": "94d65805550da90f221a627bac2d47fe51c80eeeec4556439518f21a4e3453f628ff5b5a7771e2a04baba2c8ce114f6dee821097b0b0e972c330a9406e2435a4"
              }
            }
          }' > containers.json

      - name: Create public-endpoint.json file
        run: |
          echo '{
            "containerName": "client",
            "containerPort": 80,
            "healthCheck": {
              "intervalSeconds": 10,
              "path": "/api/health"
            }
          }' > public-endpoint.json

      - name: Deploy to AWS Lightsail
        run: |
          aws lightsail create-container-service-deployment \
          --service-name ${{ vars.AWS_LIGHTSAIL_SERVICE }} \
          --containers file://containers.json \
          --public-endpoint file://public-endpoint.json
